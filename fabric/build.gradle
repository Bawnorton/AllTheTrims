plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.modmuss50.mod-publish-plugin" version "0.3.3"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    // mixin addons
    include(implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-fabric:${rootProject.mixin_extras_version}")))
    include(implementation(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-fabric:${rootProject.mixin_squared_version}")))

    // config
    modImplementation("dev.isxander.yacl:yet-another-config-lib-fabric:${rootProject.yacl_version}")
    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")

    // compats
    modCompileOnly("maven.modrinth:elytra-trims:${project.elytra_trims_version}")
    modCompileOnly("maven.modrinth:show-me-your-skin:${project.show_me_your_skin_version}")
    modCompileOnly("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cardinal_components_version}")
    modCompileOnly("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cardinal_components_version}")
    modCompileOnly("nl.enjarai:cicada-lib:${project.cicada_version}") { exclude group: "net.fabricmc.fabric-api" }
    modCompileOnly("io.wispforest:owo-lib:${project.owo_version}")
    modCompileOnly("maven.modrinth:mythicmetals:${project.mythic_metals_version}")
    modCompileOnly("maven.modrinth:frostiful:${project.frostiful_version}")
    modCompileOnly("maven.modrinth:betterend:${project.betterend_version}")
    modCompileOnly("com.github.quiqueck:BCLib:${project.bclib_version}") { transitive false }
    modCompileOnly(fileTree(dir: "libs", include: ["*.jar"])) // wunderlib 1.1.3 with mapping conflict resolved
    modImplementation("maven.modrinth:better-trim-tooltips:${project.better_trim_tooltips_version}")

    // jei
    modCompileOnlyApi("mezz.jei:jei-${rootProject.minecraft_version}-common-api:${rootProject.jei_version}")
    modCompileOnlyApi("mezz.jei:jei-${rootProject.minecraft_version}-fabric-api:${rootProject.jei_version}")

    // rei
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${rootProject.rei_version}")
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${rootProject.rei_version}")

    // emi
    modCompileOnly("dev.emi:emi-fabric:${rootProject.emi_version}:api")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
    archiveClassifier = "fabric+${rootProject.minecraft_version}"
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

publishMods {
    file = remapJar.archiveFile
    changelog = "[Changelog](https://github.com/Bawnorton/AllTheTrims/releases/tag/%s)".formatted(project.version)
    type = STABLE
    modLoaders.add("fabric")

    github {
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        repository = "Bawnorton/AllTheTrims"
        commitish = "arch-port"
        changelog = file("../CHANGELOG.md").readLines().join("\n")
        displayName = project.version
    }

    curseforge {
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        projectId = "876154"
        minecraftVersions.addAll("1.20", "1.20.1")
        displayName = "allthetrims-%s-%s.jar".formatted(project.version, remapJar.archiveClassifier.get())

        requires {
            slug = "architectury-api"
        }
    }

    modrinth {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "pnsUKrap"
        minecraftVersions.addAll("1.20", "1.20.1")
        displayName = "All The Trims %s".formatted(project.version)

        requires {
            slug = "architectury-api"
        }
    }
}