plugins {
	id 'fabric-loom' version '1.2-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven {
		url = "https://jitpack.io"
	}
	maven {
		url = "https://maven.enjarai.nl/releases"
	}
	maven { url 'https://maven.wispforest.io' }

	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

loom {
    splitEnvironmentSourceSets()

	mods {
		"allthetrims" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

	accessWidenerPath = file("src/main/resources/allthetrims.accesswidener")
}

dependencies {
	// minecraft/fabric
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// fabric API
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// mixin extras
	include(implementation(annotationProcessor(clientAnnotationProcessor("com.github.llamalad7.mixinextras:mixinextras-fabric:${project.mixin_extras_version}"))))

	// mod compats
	modImplementation("maven.modrinth:elytra-trims:${project.elytra_trims_version}")
	modImplementation("maven.modrinth:modmenu:${project.modmenu_version}")
	modImplementation("maven.modrinth:betterend:${project.betterend_version}")
	modImplementation("maven.modrinth:show-me-your-skin:${project.show_me_your_skin_version}")
	modImplementation("maven.modrinth:mythicmetals:${project.mythicmetals_version}")

	// mod compats dependencies
	modImplementation("maven.modrinth:yacl:${project.yacl_version}")
	modImplementation("io.wispforest:owo-lib:${project.owo_version}")
	modImplementation("nl.enjarai:cicada-lib:${project.cicada_version}") { exclude group: "net.fabricmc.fabric-api" }
	modImplementation("com.github.quiqueck:BCLib:${project.bclib_version}") { transitive = false }
	modImplementation(fileTree(dir: "libs", include: ["*.jar"])) // wunderlib 1.1.3 with mapping conflict resolved
	modImplementation("maven.modrinth:additionalentityattributes:${project.additionalentityattributes_version}")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
